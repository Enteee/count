{"version":3,"sources":["webpack:///src/app/counter-detail/counter-count/counter-count.module.ts","webpack:///src/app/counter-detail/counter-count/counter-count.page.ts","webpack:///src/app/counter-detail/counter-count/counter-count.page.html","webpack:///src/app/services/counter.service.ts"],"names":["routes","path","component","CounterCountPageModule","forChild","imports","declarations","CounterCountPage","router","route","counterService","counter","snapshot","data","addRandomCountEvent","selector","templateUrl","styleUrls","CounterService","counterRepositoryService","countEventRepositoryService","positionService","appStateService","vibration","newCounter","sortOrder","all","length","save","delete","Promise","getByCounter","map","i","delta","count","appState","vibrate","VIBRATION_PATTERN_POSITIVE","VIBRATION_PATTERN_NEGATIVE","positiveWrapAroundActive","positiveWrapAround","negativeWrapAroundActive","negativeWrapAround","position","getPosition","setRecordPosition","id","Reset","setLocked","locked","from","to","counters","allSortBySortOrder","splice","randomDate","start","end","Date","getTime","Math","random","round","Change","providedIn"],"mappings":"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","file":"counter-count-counter-count-module-es5.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { NotImplementedModule } from '../../not-implemented/not-implemented.module';\n\nimport { CounterCountPage } from './counter-count.page';\n\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: CounterCountPage,\n  }\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    IonicModule,\n    RouterModule.forChild(routes),\n    NotImplementedModule,\n  ],\n  declarations: [CounterCountPage]\n})\nexport class CounterCountPageModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\n\nimport { Counter } from '../../models/counter';\nimport { CounterService } from '../../services/counter.service';\n\ntype ClampFunction = 'max' | 'min';\n\n@Component({\n  selector: 'app-counter-count',\n  templateUrl: './counter-count.page.html',\n  styleUrls: ['./counter-count.page.scss'],\n})\nexport class CounterCountPage implements OnInit {\n\n  counter: Counter;\n\n  constructor(\n    private router: Router,\n    private route: ActivatedRoute,\n    private counterService: CounterService,\n  ) {}\n\n  ngOnInit() {\n    this.counter = this.route.snapshot.data.counter;\n  }\n\n  addRandomCountEvent() {\n    this.counterService.addRandomCountEvent(this.counter);\n  }\n}\n\n","<ion-content>\n  <ion-list>\n    <ion-button\n      size=\"large\"\n      expand=\"full\"\n      color=\"dark\"\n      (click)=\"addRandomCountEvent()\"\n    >\n      <ion-icon name=\"shuffle\"></ion-icon>\n      Random Count Event\n    </ion-button>\n  </ion-list>\n</ion-content>\n","import { Injectable } from '@angular/core';\n\nimport { Geolocation } from '@ionic-native/geolocation/ngx';\nimport { Vibration } from '@ionic-native/vibration/ngx';\n\nimport { Counter } from '../models/counter';\nimport { CounterRepositoryService } from '../models/counter-repository.service';\n\nimport { CountEvent, CountEventType } from '../models/count-event';\nimport { CountEventRepositoryService } from '../models/count-event-repository.service';\n\nimport { Position } from '../models/count-event';\nimport { PositionService } from './position.service';\n\nimport { AppStateService } from './app-state.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CounterService {\n\n  static readonly VIBRATION_PATTERN_POSITIVE = [30];\n  static readonly VIBRATION_PATTERN_NEGATIVE = [30, 30, 30];\n\n  constructor(\n    private counterRepositoryService: CounterRepositoryService,\n    private countEventRepositoryService: CountEventRepositoryService,\n    private positionService: PositionService,\n    private appStateService: AppStateService,\n    private vibration: Vibration,\n  ) {}\n\n  get allSortBySortOrder(): Array<Counter> {\n    return this.counterRepositoryService.allSortBySortOrder;\n  }\n\n  async addCounter() {\n    const newCounter = new Counter();\n    // add counter to bottom\n    newCounter.sortOrder = this.counterRepositoryService.all.length + 1;\n    await this.counterRepositoryService.save(newCounter);\n    return newCounter;\n  }\n\n  async delete(counter: Counter) {\n    // first delete the counter: this is so that the ui element disappers\n    // quicker which should be create better user experience.\n    await this.counterRepositoryService.delete(counter);\n\n    // then, delete all events of this counter\n    await Promise.all(\n      this.countEventRepositoryService.getByCounter(counter).map(\n        (i) => this.countEventRepositoryService.delete(i)\n      )\n    );\n  }\n\n  async count(\n    counter: Counter,\n    delta: number,\n  ) {\n    counter.count += delta;\n\n    // vibrate\n    if (\n      this.appStateService.appState.vibrate\n      && counter.vibrate\n    ) {\n      this.vibration.vibrate(\n        (delta > 0) ?\n          CounterService.VIBRATION_PATTERN_POSITIVE :\n          CounterService.VIBRATION_PATTERN_NEGATIVE\n      );\n    }\n\n    // apply positive and negative wraparounds\n    if (\n      counter.positiveWrapAroundActive\n      && counter.count > counter.positiveWrapAround\n    ) {\n      counter.count = counter.count % counter.positiveWrapAround;\n    }\n\n    if (\n      counter.negativeWrapAroundActive\n      && counter.count < counter.negativeWrapAround\n    ) {\n      counter.count = counter.count % counter.negativeWrapAround;\n    }\n\n    let position = null;\n    try {\n      position = await this.positionService.getPosition();\n    } catch (e) {\n      // user does not allow posiiton recording or something unexpected happened\n      await this.appStateService.setRecordPosition(false);\n    }\n\n    await Promise.all([\n      this.counterRepositoryService.save(counter),\n      this.countEventRepositoryService.save(\n        new CountEvent(\n          counter.id,\n          delta,\n          position,\n        )\n      )\n    ]);\n  }\n\n  async reset(\n    counter: Counter,\n  ) {\n    counter.count = 0;\n    await Promise.all([\n      this.counterRepositoryService.save(\n        counter\n      ),\n      this.countEventRepositoryService.save(\n        new CountEvent(\n          counter.id,\n          0,\n          {} as any,\n          CountEventType.Reset,\n        )\n      ),\n    ]);\n  }\n\n  async setLocked(\n    counter: Counter,\n    setLocked: boolean,\n  ) {\n    counter.locked = setLocked;\n    await this.counterRepositoryService.save(\n      counter\n    );\n  }\n\n  async reorder(\n    from: number,\n    to: number,\n  ) {\n    const counters = this.counterRepositoryService.allSortBySortOrder;\n    // move element in array\n    counters.splice(to, 0,\n      counters.splice(from, 1)[0]\n    );\n    // save in new order\n    await Promise.all(\n      counters.map(\n        async (counter, i) => {\n          counter.sortOrder = i;\n          await this.counterRepositoryService.save(counter);\n        }\n      )\n    );\n  }\n\n  /**\n   * For development purposes only\n   */\n  async addRandomCountEvent(\n    counter: Counter,\n  ) {\n    const delta = Math.round(Math.random() * 10 % 10 - 5);\n    counter.count += delta;\n\n    function randomDate(start, end) {\n      return new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));\n    }\n\n\n    await Promise.all([\n      this.counterRepositoryService.save(counter),\n      this.countEventRepositoryService.save(\n        new CountEvent(\n          counter.id,\n          delta,\n          null,\n          CountEventType.Change,\n          randomDate(new Date(2012, 0, 1), new Date()),\n        )\n      )\n    ]);\n  }\n\n}\n"]}