name: Count CI

on: [push, pull_request]

jobs:
  build:

    runs-on: ubuntu-latest
    timeout-minutes: 30

    strategy:
      matrix:
        # node-version: [8.x, 10.x, 12.x]
        node-version: [12.x]
        java-version: [1.8]
        build-args: [ "" , "--prod --release" ]
        patch: [ "", "patches/store-release.patch" ]

    steps:
    - uses: actions/checkout@v2

    - name: patch
      run: |
        if [ -f "${{ matrix.patch }}" ]; then
          git apply "${{ matrix.patch }}"
          git diff
        fi

    - name: Define Artifact Name
      run: |
        build_args="${{ matrix.build-args }}"
        build_args="${build_args:-noargs}"
        build_args="${build_args//-}"
        build_args="${build_args// /-}"

        patch="${{ matrix.patch }}"
        patch="${patch:-nopatch}"
        patch="${patch##*/}"
        patch="${patch%.patch}"

        export ARTIFACT_NAME="count-${build_args}-${patch}-node${{ matrix.node-version }}-jdk${{ matrix.java-version }}"
        echo "Building Artifact: ${ARTIFACT_NAME}"
        echo "::set-env name=ARTIFACT_NAME::$ARTIFACT_NAME"

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}

    - name: npm install
      run: npm install

    - name: install cli tools
      run: |
        npm install -g --no-save \
          @ionic/cli@6.1.0 \
          native-run@0.3.0 \
          cordova@9.0.0 \
          cordova-res@0.8.1

    - name: npm lint
      run: npm run lint

    - name: npm build
      run: npm run build --if-present

    - name: npm test
      run: npm run test-headless

    - name: Coveralls Parallel
      env:
        COVERALLS_FLAG_NAME: ${{ env.ARTIFACT_NAME }}
      uses: coverallsapp/github-action@master
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        parallel: true

    - name: Use JDK ${{ matrix.java-version }}
      uses: actions/setup-java@v1
      with:
        java-version: ${{ matrix.java-version }}

    - name: ionic cordova build
      run: |
        ionic \
          cordova build \
            android ${{ matrix.build-args }}
      env:
        CI: true

    - name: Finalize APK
      env:
        STOREPASS: ${{ secrets.ACTIONS_KEYSTORE_PW }}
      run: |
        find platforms/ -name '*.apk' -print0 \
        | xargs -0 -n1 ./apk_finalize.sh

    - name: Create Release Artifact
      run: |
        find platforms/ -name '*.apk' \
        | zip \
          --junk-paths \
          "${{ env.ARTIFACT_NAME }}.zip" \
          -@

    - name: Upload Release Artifact
      uses: actions/upload-artifact@v2
      with:
        name: "${{ env.ARTIFACT_NAME }}"
        path: "${{ env.ARTIFACT_NAME }}.zip"

  finish:
    needs: build

    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:

    - name: Coveralls Finished
      uses: coverallsapp/github-action@master
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        parallel-finished: true

  release:
    needs: finish

    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:

    - name: Download Release Artifact
      uses: actions/download-artifact@v2
      with:
        path: release/

    - name: Create Release
      uses: meeDamian/github-release@2.0
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        files: release/
        draft: true
        prerelease: true
