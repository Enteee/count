{"version":3,"sources":["webpack:///node_modules/@ionic/core/dist/esm/ion-radio_2-md.entry.js"],"names":["Radio","hostRef","inputId","radioButtonIds","radioGroup","checked","name","disabled","updateState","value","onFocus","ionFocus","emit","onBlur","ionBlur","ionStyle","undefined","el","closest","addEventListener","removeEventListener","emitStyle","color","mode","labelId","label","id","role","class","Object","assign","type","RadioGroup","radioGroupIds","allowEmptySelection","onClick","ev","selectedRadio","target","currentValue","newValue","ionChange","header","querySelector"],"mappings":"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","file":"46-es5.js","sourcesContent":["import { r as registerInstance, d as createEvent, c as getIonMode, h, H as Host, e as getElement } from './core-0a8d4d2e.js';\nimport './config-3c7f3790.js';\nimport { f as findItemLabel } from './helpers-46f4a262.js';\nimport { c as createColorClasses, h as hostContext } from './theme-18cbe2cc.js';\n\nconst Radio = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        this.inputId = `ion-rb-${radioButtonIds++}`;\n        this.radioGroup = null;\n        /**\n         * If `true`, the radio is selected.\n         */\n        this.checked = false;\n        /**\n         * The name of the control, which is submitted with the form data.\n         */\n        this.name = this.inputId;\n        /**\n         * If `true`, the user cannot interact with the radio.\n         */\n        this.disabled = false;\n        this.updateState = () => {\n            if (this.radioGroup) {\n                this.checked = this.radioGroup.value === this.value;\n            }\n        };\n        this.onFocus = () => {\n            this.ionFocus.emit();\n        };\n        this.onBlur = () => {\n            this.ionBlur.emit();\n        };\n        this.ionStyle = createEvent(this, \"ionStyle\", 7);\n        this.ionFocus = createEvent(this, \"ionFocus\", 7);\n        this.ionBlur = createEvent(this, \"ionBlur\", 7);\n    }\n    connectedCallback() {\n        if (this.value === undefined) {\n            this.value = this.inputId;\n        }\n        const radioGroup = this.radioGroup = this.el.closest('ion-radio-group');\n        if (radioGroup) {\n            this.updateState();\n            radioGroup.addEventListener('ionChange', this.updateState);\n        }\n    }\n    disconnectedCallback() {\n        const radioGroup = this.radioGroup;\n        if (radioGroup) {\n            radioGroup.removeEventListener('ionChange', this.updateState);\n            this.radioGroup = null;\n        }\n    }\n    componentWillLoad() {\n        this.emitStyle();\n    }\n    emitStyle() {\n        this.ionStyle.emit({\n            'radio-checked': this.checked,\n            'interactive-disabled': this.disabled,\n        });\n    }\n    render() {\n        const { inputId, disabled, checked, color, el } = this;\n        const mode = getIonMode(this);\n        const labelId = inputId + '-lbl';\n        const label = findItemLabel(el);\n        if (label) {\n            label.id = labelId;\n        }\n        return (h(Host, { role: \"radio\", \"aria-disabled\": disabled ? 'true' : null, \"aria-checked\": `${checked}`, \"aria-labelledby\": labelId, class: Object.assign(Object.assign({}, createColorClasses(color)), { [mode]: true, 'in-item': hostContext('ion-item', el), 'interactive': true, 'radio-checked': checked, 'radio-disabled': disabled }) }, h(\"div\", { class: \"radio-icon\" }, h(\"div\", { class: \"radio-inner\" })), h(\"button\", { type: \"button\", onFocus: this.onFocus, onBlur: this.onBlur, disabled: disabled })));\n    }\n    get el() { return getElement(this); }\n    static get watchers() { return {\n        \"color\": [\"emitStyle\"],\n        \"checked\": [\"emitStyle\"],\n        \"disabled\": [\"emitStyle\"]\n    }; }\n    static get style() { return \":host{--inner-border-radius:50%;display:inline-block;position:relative;-webkit-box-sizing:border-box;box-sizing:border-box;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;z-index:2}:host(.radio-disabled){pointer-events:none}.radio-icon{display:-ms-flexbox;display:flex;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center;contain:layout size style}.radio-icon,button{width:100%;height:100%}button{left:0;top:0;margin-left:0;margin-right:0;margin-top:0;margin-bottom:0;position:absolute;border:0;background:transparent;cursor:pointer;-webkit-appearance:none;-moz-appearance:none;appearance:none;outline:none}:host-context([dir=rtl]) button,[dir=rtl] button{left:unset;right:unset;right:0}button::-moz-focus-inner{border:0}.radio-icon,.radio-inner{-webkit-box-sizing:border-box;box-sizing:border-box}:host{--color:var(--ion-color-step-400,#999);--color-checked:var(--ion-color-primary,#3880ff);--border-width:2px;--border-style:solid;--border-radius:50%;width:20px;height:20px}:host(.ion-color) .radio-inner{background:var(--ion-color-base)}:host(.ion-color.radio-checked) .radio-icon{border-color:var(--ion-color-base)}.radio-icon{margin-left:0;margin-right:0;margin-top:0;margin-bottom:0;border-radius:var(--border-radius);border-width:var(--border-width);border-style:var(--border-style);border-color:var(--color)}.radio-inner{border-radius:var(--inner-border-radius);width:calc(50% + var(--border-width));height:calc(50% + var(--border-width));-webkit-transform:scale3d(0,0,0);transform:scale3d(0,0,0);-webkit-transition:-webkit-transform .28s cubic-bezier(.4,0,.2,1);transition:-webkit-transform .28s cubic-bezier(.4,0,.2,1);transition:transform .28s cubic-bezier(.4,0,.2,1);transition:transform .28s cubic-bezier(.4,0,.2,1),-webkit-transform .28s cubic-bezier(.4,0,.2,1);background:var(--color-checked)}:host(.radio-checked) .radio-icon{border-color:var(--color-checked)}:host(.radio-checked) .radio-inner{-webkit-transform:scaleX(1);transform:scaleX(1)}:host(.radio-disabled){opacity:.3}:host(.ion-focused) .radio-icon:after{border-radius:var(--inner-border-radius);left:-12px;top:-12px;display:block;position:absolute;width:36px;height:36px;background:var(--ion-color-primary-tint,#4c8dff);content:\\\"\\\";opacity:.2}:host-context([dir=rtl]).ion-focused .radio-icon:after,:host-context([dir=rtl]):host(.ion-focused) .radio-icon:after{left:unset;right:unset;right:-12px}:host(.in-item){margin-left:0;margin-right:0;margin-top:9px;margin-bottom:9px;display:block;position:static}:host(.in-item[slot=start]){margin-left:4px;margin-right:36px;margin-top:11px;margin-bottom:10px}\\@supports ((-webkit-margin-start:0) or (margin-inline-start:0)) or (-webkit-margin-start:0){:host(.in-item[slot=start]){margin-left:unset;margin-right:unset;-webkit-margin-start:4px;margin-inline-start:4px;-webkit-margin-end:36px;margin-inline-end:36px}}\"; }\n};\nlet radioButtonIds = 0;\n\nconst RadioGroup = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        this.inputId = `ion-rg-${radioGroupIds++}`;\n        this.labelId = `${this.inputId}-lbl`;\n        /**\n         * If `true`, the radios can be deselected.\n         */\n        this.allowEmptySelection = false;\n        /**\n         * The name of the control, which is submitted with the form data.\n         */\n        this.name = this.inputId;\n        this.onClick = (ev) => {\n            const selectedRadio = ev.target && ev.target.closest('ion-radio');\n            if (selectedRadio) {\n                const currentValue = this.value;\n                const newValue = selectedRadio.value;\n                if (newValue !== currentValue) {\n                    this.value = newValue;\n                }\n                else if (this.allowEmptySelection) {\n                    this.value = undefined;\n                }\n            }\n        };\n        this.ionChange = createEvent(this, \"ionChange\", 7);\n    }\n    valueChanged(value) {\n        this.ionChange.emit({ value });\n    }\n    async connectedCallback() {\n        // Get the list header if it exists and set the id\n        // this is used to set aria-labelledby\n        const el = this.el;\n        const header = el.querySelector('ion-list-header') || el.querySelector('ion-item-divider');\n        if (header) {\n            const label = header.querySelector('ion-label');\n            if (label) {\n                this.labelId = label.id = this.name + '-lbl';\n            }\n        }\n    }\n    render() {\n        return (h(Host, { role: \"radiogroup\", \"aria-labelledby\": this.labelId, onClick: this.onClick, class: getIonMode(this) }));\n    }\n    get el() { return getElement(this); }\n    static get watchers() { return {\n        \"value\": [\"valueChanged\"]\n    }; }\n};\nlet radioGroupIds = 0;\n\nexport { Radio as ion_radio, RadioGroup as ion_radio_group };\n"]}