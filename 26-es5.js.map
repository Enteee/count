{"version":3,"sources":["webpack:///node_modules/@ionic/core/dist/esm/ion-infinite-scroll_2-ios.entry.js"],"names":["infiniteScrollCss","InfiniteScroll","hostRef","thrPx","thrPc","didFire","isBusy","isLoading","threshold","disabled","position","onScroll","scrollEl","canStart","infiniteHeight","el","offsetHeight","scrollTop","scrollHeight","height","distanceFromInfinite","ionInfinite","emit","val","lastIndexOf","parseFloat","enableScrollEvents","contentEl","closest","console","error","getScrollElement","thresholdChanged","disabledChanged","clientHeight","undefined","prev","requestAnimationFrame","newScrollTop","shouldListen","addEventListener","removeEventListener","mode","style","infiniteScrollContentIosCss","infiniteScrollContentMdCss","InfiniteScrollContent","loadingSpinner","get","name","loadingText","innerHTML","ios","md"],"mappings":"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","file":"26-es5.js","sourcesContent":["import { r as registerInstance, c as createEvent, w as writeTask, d as readTask, h, e as getElement, H as Host } from './index-29df6f59.js';\nimport { b as getIonMode, c as config } from './ionic-global-08f4fb8a.js';\nimport { s as sanitizeDOMString } from './index-79d74e0b.js';\n\nconst infiniteScrollCss = \"ion-infinite-scroll{display:none;width:100%}.infinite-scroll-enabled{display:block}\";\n\nclass InfiniteScroll {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        this.thrPx = 0;\n        this.thrPc = 0;\n        this.didFire = false;\n        this.isBusy = false;\n        this.isLoading = false;\n        /**\n         * The threshold distance from the bottom\n         * of the content to call the `infinite` output event when scrolled.\n         * The threshold value can be either a percent, or\n         * in pixels. For example, use the value of `10%` for the `infinite`\n         * output event to get called when the user has scrolled 10%\n         * from the bottom of the page. Use the value `100px` when the\n         * scroll is within 100 pixels from the bottom of the page.\n         */\n        this.threshold = '15%';\n        /**\n         * If `true`, the infinite scroll will be hidden and scroll event listeners\n         * will be removed.\n         *\n         * Set this to true to disable the infinite scroll from actively\n         * trying to receive new data while scrolling. This is useful\n         * when it is known that there is no more data that can be added, and\n         * the infinite scroll is no longer needed.\n         */\n        this.disabled = false;\n        /**\n         * The position of the infinite scroll element.\n         * The value can be either `top` or `bottom`.\n         */\n        this.position = 'bottom';\n        this.onScroll = () => {\n            const scrollEl = this.scrollEl;\n            if (!scrollEl || !this.canStart()) {\n                return 1;\n            }\n            const infiniteHeight = this.el.offsetHeight;\n            if (infiniteHeight === 0) {\n                // if there is no height of this element then do nothing\n                return 2;\n            }\n            const scrollTop = scrollEl.scrollTop;\n            const scrollHeight = scrollEl.scrollHeight;\n            const height = scrollEl.offsetHeight;\n            const threshold = this.thrPc !== 0 ? (height * this.thrPc) : this.thrPx;\n            const distanceFromInfinite = (this.position === 'bottom')\n                ? scrollHeight - infiniteHeight - scrollTop - threshold - height\n                : scrollTop - infiniteHeight - threshold;\n            if (distanceFromInfinite < 0) {\n                if (!this.didFire) {\n                    this.isLoading = true;\n                    this.didFire = true;\n                    this.ionInfinite.emit();\n                    return 3;\n                }\n            }\n            else {\n                this.didFire = false;\n            }\n            return 4;\n        };\n        this.ionInfinite = createEvent(this, \"ionInfinite\", 7);\n    }\n    thresholdChanged() {\n        const val = this.threshold;\n        if (val.lastIndexOf('%') > -1) {\n            this.thrPx = 0;\n            this.thrPc = (parseFloat(val) / 100);\n        }\n        else {\n            this.thrPx = parseFloat(val);\n            this.thrPc = 0;\n        }\n    }\n    disabledChanged() {\n        const disabled = this.disabled;\n        if (disabled) {\n            this.isLoading = false;\n            this.isBusy = false;\n        }\n        this.enableScrollEvents(!disabled);\n    }\n    async connectedCallback() {\n        const contentEl = this.el.closest('ion-content');\n        if (!contentEl) {\n            console.error('<ion-infinite-scroll> must be used inside an <ion-content>');\n            return;\n        }\n        this.scrollEl = await contentEl.getScrollElement();\n        this.thresholdChanged();\n        this.disabledChanged();\n        if (this.position === 'top') {\n            writeTask(() => {\n                if (this.scrollEl) {\n                    this.scrollEl.scrollTop = this.scrollEl.scrollHeight - this.scrollEl.clientHeight;\n                }\n            });\n        }\n    }\n    disconnectedCallback() {\n        this.enableScrollEvents(false);\n        this.scrollEl = undefined;\n    }\n    /**\n     * Call `complete()` within the `ionInfinite` output event handler when\n     * your async operation has completed. For example, the `loading`\n     * state is while the app is performing an asynchronous operation,\n     * such as receiving more data from an AJAX request to add more items\n     * to a data list. Once the data has been received and UI updated, you\n     * then call this method to signify that the loading has completed.\n     * This method will change the infinite scroll's state from `loading`\n     * to `enabled`.\n     */\n    async complete() {\n        const scrollEl = this.scrollEl;\n        if (!this.isLoading || !scrollEl) {\n            return;\n        }\n        this.isLoading = false;\n        if (this.position === 'top') {\n            /**\n             * New content is being added at the top, but the scrollTop position stays the same,\n             * which causes a scroll jump visually. This algorithm makes sure to prevent this.\n             * (Frame 1)\n             *    - complete() is called, but the UI hasn't had time to update yet.\n             *    - Save the current content dimensions.\n             *    - Wait for the next frame using _dom.read, so the UI will be updated.\n             * (Frame 2)\n             *    - Read the new content dimensions.\n             *    - Calculate the height difference and the new scroll position.\n             *    - Delay the scroll position change until other possible dom reads are done using _dom.write to be performant.\n             * (Still frame 2, if I'm correct)\n             *    - Change the scroll position (= visually maintain the scroll position).\n             *    - Change the state to re-enable the InfiniteScroll.\n             *    - This should be after changing the scroll position, or it could\n             *    cause the InfiniteScroll to be triggered again immediately.\n             * (Frame 3)\n             *    Done.\n             */\n            this.isBusy = true;\n            // ******** DOM READ ****************\n            // Save the current content dimensions before the UI updates\n            const prev = scrollEl.scrollHeight - scrollEl.scrollTop;\n            // ******** DOM READ ****************\n            requestAnimationFrame(() => {\n                readTask(() => {\n                    // UI has updated, save the new content dimensions\n                    const scrollHeight = scrollEl.scrollHeight;\n                    // New content was added on top, so the scroll position should be changed immediately to prevent it from jumping around\n                    const newScrollTop = scrollHeight - prev;\n                    // ******** DOM WRITE ****************\n                    requestAnimationFrame(() => {\n                        writeTask(() => {\n                            scrollEl.scrollTop = newScrollTop;\n                            this.isBusy = false;\n                        });\n                    });\n                });\n            });\n        }\n    }\n    canStart() {\n        return (!this.disabled &&\n            !this.isBusy &&\n            !!this.scrollEl &&\n            !this.isLoading);\n    }\n    enableScrollEvents(shouldListen) {\n        if (this.scrollEl) {\n            if (shouldListen) {\n                this.scrollEl.addEventListener('scroll', this.onScroll);\n            }\n            else {\n                this.scrollEl.removeEventListener('scroll', this.onScroll);\n            }\n        }\n    }\n    render() {\n        const mode = getIonMode(this);\n        const disabled = this.disabled;\n        return (h(Host, { class: {\n                [mode]: true,\n                'infinite-scroll-loading': this.isLoading,\n                'infinite-scroll-enabled': !disabled\n            } }));\n    }\n    get el() { return getElement(this); }\n    static get watchers() { return {\n        \"threshold\": [\"thresholdChanged\"],\n        \"disabled\": [\"disabledChanged\"]\n    }; }\n}\nInfiniteScroll.style = infiniteScrollCss;\n\nconst infiniteScrollContentIosCss = \"ion-infinite-scroll-content{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column;-ms-flex-pack:center;justify-content:center;min-height:84px;text-align:center;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.infinite-loading{margin-left:0;margin-right:0;margin-top:0;margin-bottom:32px;display:none;width:100%}.infinite-loading-text{margin-left:32px;margin-right:32px;margin-top:4px;margin-bottom:0}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){.infinite-loading-text{margin-left:unset;margin-right:unset;-webkit-margin-start:32px;margin-inline-start:32px;-webkit-margin-end:32px;margin-inline-end:32px}}.infinite-scroll-loading ion-infinite-scroll-content>.infinite-loading{display:block}.infinite-scroll-content-ios .infinite-loading-text{color:var(--ion-color-step-600, #666666)}.infinite-scroll-content-ios .infinite-loading-spinner .spinner-lines-ios line,.infinite-scroll-content-ios .infinite-loading-spinner .spinner-lines-small-ios line,.infinite-scroll-content-ios .infinite-loading-spinner .spinner-crescent circle{stroke:var(--ion-color-step-600, #666666)}.infinite-scroll-content-ios .infinite-loading-spinner .spinner-bubbles circle,.infinite-scroll-content-ios .infinite-loading-spinner .spinner-circles circle,.infinite-scroll-content-ios .infinite-loading-spinner .spinner-dots circle{fill:var(--ion-color-step-600, #666666)}\";\n\nconst infiniteScrollContentMdCss = \"ion-infinite-scroll-content{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column;-ms-flex-pack:center;justify-content:center;min-height:84px;text-align:center;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.infinite-loading{margin-left:0;margin-right:0;margin-top:0;margin-bottom:32px;display:none;width:100%}.infinite-loading-text{margin-left:32px;margin-right:32px;margin-top:4px;margin-bottom:0}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){.infinite-loading-text{margin-left:unset;margin-right:unset;-webkit-margin-start:32px;margin-inline-start:32px;-webkit-margin-end:32px;margin-inline-end:32px}}.infinite-scroll-loading ion-infinite-scroll-content>.infinite-loading{display:block}.infinite-scroll-content-md .infinite-loading-text{color:var(--ion-color-step-600, #666666)}.infinite-scroll-content-md .infinite-loading-spinner .spinner-lines-md line,.infinite-scroll-content-md .infinite-loading-spinner .spinner-lines-small-md line,.infinite-scroll-content-md .infinite-loading-spinner .spinner-crescent circle{stroke:var(--ion-color-step-600, #666666)}.infinite-scroll-content-md .infinite-loading-spinner .spinner-bubbles circle,.infinite-scroll-content-md .infinite-loading-spinner .spinner-circles circle,.infinite-scroll-content-md .infinite-loading-spinner .spinner-dots circle{fill:var(--ion-color-step-600, #666666)}\";\n\nclass InfiniteScrollContent {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n    }\n    componentDidLoad() {\n        if (this.loadingSpinner === undefined) {\n            const mode = getIonMode(this);\n            this.loadingSpinner = config.get('infiniteLoadingSpinner', config.get('spinner', mode === 'ios' ? 'lines' : 'crescent'));\n        }\n    }\n    render() {\n        const mode = getIonMode(this);\n        return (h(Host, { class: {\n                [mode]: true,\n                // Used internally for styling\n                [`infinite-scroll-content-${mode}`]: true\n            } }, h(\"div\", { class: \"infinite-loading\" }, this.loadingSpinner && (h(\"div\", { class: \"infinite-loading-spinner\" }, h(\"ion-spinner\", { name: this.loadingSpinner }))), this.loadingText && (h(\"div\", { class: \"infinite-loading-text\", innerHTML: sanitizeDOMString(this.loadingText) })))));\n    }\n}\nInfiniteScrollContent.style = {\n    /*STENCIL:MODE:ios*/ ios: infiniteScrollContentIosCss,\n    /*STENCIL:MODE:md*/ md: infiniteScrollContentMdCss\n};\n\nexport { InfiniteScroll as ion_infinite_scroll, InfiniteScrollContent as ion_infinite_scroll_content };\n"]}