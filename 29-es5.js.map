{"version":3,"sources":["webpack:///node_modules/@ionic/core/dist/esm/ion-input-md.entry.js"],"names":["Input","hostRef","inputId","inputIds","didBlurAfterEdit","hasFocus","autocapitalize","autocomplete","autocorrect","autofocus","clearInput","debounce","disabled","name","readonly","required","spellcheck","type","value","onInput","ev","input","target","ionInput","emit","onBlur","focusChanged","emitStyle","ionBlur","onFocus","ionFocus","onKeydown","shouldClearOnEdit","hasValue","key","clearTextInput","preventDefault","stopPropagation","nativeInput","ionChange","ionInputDidLoad","ionInputDidUnload","ionStyle","toString","debounceChanged","el","dispatchEvent","CustomEvent","detail","document","focus","Promise","resolve","clearOnEdit","undefined","placeholder","getValue","length","mode","labelId","label","id","class","Object","assign","color","ref","accept","autoCapitalize","autoComplete","autoCorrect","autoFocus","inputMode","inputmode","min","max","minLength","minlength","maxLength","maxlength","multiple","pattern","readOnly","spellCheck","step","size","onKeyDown","tabindex","onTouchStart","onMouseDown"],"mappings":"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","file":"29-es5.js","sourcesContent":["import { r as registerInstance, d as createEvent, c as getIonMode, h, H as Host, e as getElement } from './core-0a8d4d2e.js';\nimport './config-3c7f3790.js';\nimport { d as debounceEvent, f as findItemLabel } from './helpers-46f4a262.js';\nimport { c as createColorClasses } from './theme-18cbe2cc.js';\n\nconst Input = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        this.inputId = `ion-input-${inputIds++}`;\n        this.didBlurAfterEdit = false;\n        this.hasFocus = false;\n        /**\n         * Indicates whether and how the text value should be automatically capitalized as it is entered/edited by the user.\n         */\n        this.autocapitalize = 'off';\n        /**\n         * Indicates whether the value of the control can be automatically completed by the browser.\n         */\n        this.autocomplete = 'off';\n        /**\n         * Whether auto correction should be enabled when the user is entering/editing the text value.\n         */\n        this.autocorrect = 'off';\n        /**\n         * This Boolean attribute lets you specify that a form control should have input focus when the page loads.\n         */\n        this.autofocus = false;\n        /**\n         * If `true`, a clear icon will appear in the input when there is a value. Clicking it clears the input.\n         */\n        this.clearInput = false;\n        /**\n         * Set the amount of time, in milliseconds, to wait to trigger the `ionChange` event after each keystroke.\n         */\n        this.debounce = 0;\n        /**\n         * If `true`, the user cannot interact with the input.\n         */\n        this.disabled = false;\n        /**\n         * The name of the control, which is submitted with the form data.\n         */\n        this.name = this.inputId;\n        /**\n         * If `true`, the user cannot modify the value.\n         */\n        this.readonly = false;\n        /**\n         * If `true`, the user must fill in a value before submitting a form.\n         */\n        this.required = false;\n        /**\n         * If `true`, the element will have its spelling and grammar checked.\n         */\n        this.spellcheck = false;\n        /**\n         * The type of control to display. The default type is text.\n         */\n        this.type = 'text';\n        /**\n         * The value of the input.\n         */\n        this.value = '';\n        this.onInput = (ev) => {\n            const input = ev.target;\n            if (input) {\n                this.value = input.value || '';\n            }\n            this.ionInput.emit(ev);\n        };\n        this.onBlur = () => {\n            this.hasFocus = false;\n            this.focusChanged();\n            this.emitStyle();\n            this.ionBlur.emit();\n        };\n        this.onFocus = () => {\n            this.hasFocus = true;\n            this.focusChanged();\n            this.emitStyle();\n            this.ionFocus.emit();\n        };\n        this.onKeydown = (ev) => {\n            if (this.shouldClearOnEdit()) {\n                // Did the input value change after it was blurred and edited?\n                // Do not clear if user is hitting Enter to submit form\n                if (this.didBlurAfterEdit && this.hasValue() && ev.key !== 'Enter') {\n                    // Clear the input\n                    this.clearTextInput();\n                }\n                // Reset the flag\n                this.didBlurAfterEdit = false;\n            }\n        };\n        this.clearTextInput = (ev) => {\n            if (this.clearInput && !this.readonly && !this.disabled && ev) {\n                ev.preventDefault();\n                ev.stopPropagation();\n            }\n            this.value = '';\n            /**\n             * This is needed for clearOnEdit\n             * Otherwise the value will not be cleared\n             * if user is inside the input\n             */\n            if (this.nativeInput) {\n                this.nativeInput.value = '';\n            }\n        };\n        this.ionInput = createEvent(this, \"ionInput\", 7);\n        this.ionChange = createEvent(this, \"ionChange\", 7);\n        this.ionBlur = createEvent(this, \"ionBlur\", 7);\n        this.ionFocus = createEvent(this, \"ionFocus\", 7);\n        this.ionInputDidLoad = createEvent(this, \"ionInputDidLoad\", 7);\n        this.ionInputDidUnload = createEvent(this, \"ionInputDidUnload\", 7);\n        this.ionStyle = createEvent(this, \"ionStyle\", 7);\n    }\n    debounceChanged() {\n        this.ionChange = debounceEvent(this.ionChange, this.debounce);\n    }\n    disabledChanged() {\n        this.emitStyle();\n    }\n    /**\n     * Update the native input element when the value changes\n     */\n    valueChanged() {\n        this.emitStyle();\n        this.ionChange.emit({ value: this.value == null ? this.value : this.value.toString() });\n    }\n    connectedCallback() {\n        this.emitStyle();\n        this.debounceChanged();\n        {\n            this.el.dispatchEvent(new CustomEvent('ionInputDidLoad', {\n                detail: this.el\n            }));\n        }\n    }\n    disconnectedCallback() {\n        {\n            document.dispatchEvent(new CustomEvent('ionInputDidUnload', {\n                detail: this.el\n            }));\n        }\n    }\n    /**\n     * Sets focus on the specified `ion-input`. Use this method instead of the global\n     * `input.focus()`.\n     */\n    async setFocus() {\n        if (this.nativeInput) {\n            this.nativeInput.focus();\n        }\n    }\n    /**\n     * Returns the native `<input>` element used under the hood.\n     */\n    getInputElement() {\n        return Promise.resolve(this.nativeInput);\n    }\n    shouldClearOnEdit() {\n        const { type, clearOnEdit } = this;\n        return (clearOnEdit === undefined)\n            ? type === 'password'\n            : clearOnEdit;\n    }\n    getValue() {\n        return typeof this.value === 'number' ? this.value.toString() :\n            (this.value || '').toString();\n    }\n    emitStyle() {\n        this.ionStyle.emit({\n            'interactive': true,\n            'input': true,\n            'has-placeholder': this.placeholder != null,\n            'has-value': this.hasValue(),\n            'has-focus': this.hasFocus,\n            'interactive-disabled': this.disabled,\n        });\n    }\n    focusChanged() {\n        // If clearOnEdit is enabled and the input blurred but has a value, set a flag\n        if (!this.hasFocus && this.shouldClearOnEdit() && this.hasValue()) {\n            this.didBlurAfterEdit = true;\n        }\n    }\n    hasValue() {\n        return this.getValue().length > 0;\n    }\n    render() {\n        const mode = getIonMode(this);\n        const value = this.getValue();\n        const labelId = this.inputId + '-lbl';\n        const label = findItemLabel(this.el);\n        if (label) {\n            label.id = labelId;\n        }\n        return (h(Host, { \"aria-disabled\": this.disabled ? 'true' : null, class: Object.assign(Object.assign({}, createColorClasses(this.color)), { [mode]: true, 'has-value': this.hasValue(), 'has-focus': this.hasFocus }) }, h(\"input\", { class: \"native-input\", ref: input => this.nativeInput = input, \"aria-labelledby\": labelId, disabled: this.disabled, accept: this.accept, autoCapitalize: this.autocapitalize, autoComplete: this.autocomplete, autoCorrect: this.autocorrect, autoFocus: this.autofocus, inputMode: this.inputmode, min: this.min, max: this.max, minLength: this.minlength, maxLength: this.maxlength, multiple: this.multiple, name: this.name, pattern: this.pattern, placeholder: this.placeholder || '', readOnly: this.readonly, required: this.required, spellCheck: this.spellcheck, step: this.step, size: this.size, type: this.type, value: value, onInput: this.onInput, onBlur: this.onBlur, onFocus: this.onFocus, onKeyDown: this.onKeydown }), (this.clearInput && !this.readonly && !this.disabled) && h(\"button\", { type: \"button\", class: \"input-clear-icon\", tabindex: \"-1\", onTouchStart: this.clearTextInput, onMouseDown: this.clearTextInput })));\n    }\n    get el() { return getElement(this); }\n    static get watchers() { return {\n        \"debounce\": [\"debounceChanged\"],\n        \"disabled\": [\"disabledChanged\"],\n        \"value\": [\"valueChanged\"]\n    }; }\n    static get style() { return \".sc-ion-input-md-h{--placeholder-color:initial;--placeholder-font-style:initial;--placeholder-font-weight:initial;--placeholder-opacity:.5;--padding-top:0;--padding-bottom:0;--padding-start:0;--background:transparent;--color:initial;display:-ms-flexbox;display:flex;position:relative;-ms-flex:1;flex:1;-ms-flex-align:center;align-items:center;width:100%;padding:0!important;background:var(--background);color:var(--color);font-family:var(--ion-font-family,inherit);z-index:2}ion-item.sc-ion-input-md-h:not(.item-label), ion-item:not(.item-label) .sc-ion-input-md-h{--padding-start:0}.ion-color.sc-ion-input-md-h{color:var(--ion-color-base)}.native-input.sc-ion-input-md{border-radius:var(--border-radius);padding-left:var(--padding-start);padding-right:var(--padding-end);padding-top:var(--padding-top);padding-bottom:var(--padding-bottom);font-family:inherit;font-size:inherit;font-style:inherit;font-weight:inherit;letter-spacing:inherit;text-decoration:inherit;text-indent:inherit;text-overflow:inherit;text-transform:inherit;text-align:inherit;white-space:inherit;color:inherit;display:inline-block;-ms-flex:1;flex:1;width:100%;max-width:100%;max-height:100%;border:0;outline:none;background:transparent;-webkit-box-sizing:border-box;box-sizing:border-box;-webkit-appearance:none;-moz-appearance:none;appearance:none}\\@supports ((-webkit-margin-start:0) or (margin-inline-start:0)) or (-webkit-margin-start:0){.native-input.sc-ion-input-md{padding-left:unset;padding-right:unset;-webkit-padding-start:var(--padding-start);padding-inline-start:var(--padding-start);-webkit-padding-end:var(--padding-end);padding-inline-end:var(--padding-end)}}.native-input.sc-ion-input-md::-webkit-input-placeholder{color:var(--placeholder-color);font-family:inherit;font-style:var(--placeholder-font-style);font-weight:var(--placeholder-font-weight);opacity:var(--placeholder-opacity)}.native-input.sc-ion-input-md::-moz-placeholder{color:var(--placeholder-color);font-family:inherit;font-style:var(--placeholder-font-style);font-weight:var(--placeholder-font-weight);opacity:var(--placeholder-opacity)}.native-input.sc-ion-input-md:-ms-input-placeholder{color:var(--placeholder-color);font-family:inherit;font-style:var(--placeholder-font-style);font-weight:var(--placeholder-font-weight);opacity:var(--placeholder-opacity)}.native-input.sc-ion-input-md::-ms-input-placeholder{color:var(--placeholder-color);font-family:inherit;font-style:var(--placeholder-font-style);font-weight:var(--placeholder-font-weight);opacity:var(--placeholder-opacity)}.native-input.sc-ion-input-md::placeholder{color:var(--placeholder-color);font-family:inherit;font-style:var(--placeholder-font-style);font-weight:var(--placeholder-font-weight);opacity:var(--placeholder-opacity)}.native-input.sc-ion-input-md:-webkit-autofill{background-color:transparent}.native-input.sc-ion-input-md:invalid{-webkit-box-shadow:none;box-shadow:none}.native-input.sc-ion-input-md::-ms-clear{display:none}.native-input[disabled].sc-ion-input-md{opacity:.4}.cloned-input.sc-ion-input-md{left:0;top:0;position:absolute;pointer-events:none}[dir=rtl].sc-ion-input-md-h .cloned-input.sc-ion-input-md, [dir=rtl] .sc-ion-input-md-h .cloned-input.sc-ion-input-md, [dir=rtl].sc-ion-input-md .cloned-input.sc-ion-input-md{left:unset;right:unset;right:0}.input-clear-icon.sc-ion-input-md{margin-left:0;margin-right:0;margin-top:0;margin-bottom:0;padding-left:0;padding-right:0;padding-top:0;padding-bottom:0;background-position:50%;border:0;outline:none;background-color:transparent;background-repeat:no-repeat;visibility:hidden;-webkit-appearance:none;-moz-appearance:none;appearance:none}.has-focus.has-value.sc-ion-input-md-h .input-clear-icon.sc-ion-input-md{visibility:visible}.has-focus.sc-ion-input-md-h{pointer-events:none}.has-focus.sc-ion-input-md-h a.sc-ion-input-md, .has-focus.sc-ion-input-md-h button.sc-ion-input-md, .has-focus.sc-ion-input-md-h input.sc-ion-input-md{pointer-events:auto}.sc-ion-input-md-h{--padding-top:10px;--padding-end:0;--padding-bottom:10px;--padding-start:8px;font-size:inherit}.item-label-floating.sc-ion-input-md-h, .item-label-floating .sc-ion-input-md-h, .item-label-stacked.sc-ion-input-md-h, .item-label-stacked .sc-ion-input-md-h{--padding-top:8px;--padding-bottom:8px;--padding-start:0}.input-clear-icon.sc-ion-input-md{background-image:url(\\\"data:image/svg+xml;charset=utf-8,<svg%20xmlns=\\'http://www.w3.org/2000/svg\\'%20viewBox=\\'0%200%20512%20512\\'><polygon%20fill=\\'var(--ion-color-step-600,%20%23666666)\\'%20points=\\'405,136.798%20375.202,107%20256,226.202%20136.798,107%20107,136.798%20226.202,256%20107,375.202%20136.798,405%20256,285.798%20375.202,405%20405,375.202%20285.798,256\\'/></svg>\\\");width:30px;height:30px;background-size:22px}\"; }\n};\nlet inputIds = 0;\n\nexport { Input as ion_input };\n"]}