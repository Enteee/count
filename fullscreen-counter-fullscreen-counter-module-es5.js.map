{"version":3,"sources":["webpack:///src/app/fullscreen-counter/fullscreen-counter.module.ts","webpack:///src/app/fullscreen-counter/fullscreen-counter.page.html","webpack:///src/app/fullscreen-counter/fullscreen-counter.page.ts","webpack:///src/app/services/counter.service.ts"],"names":["routes","path","component","FullscreenCounterPageModule","forChild","imports","declarations","FullScreenCounterType","FullscreenCounterPage","router","route","counterService","CLOSE_DELAY","type","snapshot","paramMap","get","counter","data","plus","color","minus","navigate","count","plusCount","minusCount","selector","templateUrl","styleUrls","CounterService","counterRepositoryService","countEventRepositoryService","positionService","appStateService","vibration","newCounter","sortOrder","all","length","save","Promise","getByCounter","map","i","delta","appState","vibrate","VIBRATION_PATTERN_POSITIVE","VIBRATION_PATTERN_NEGATIVE","positiveLimitActive","positiveLimit","negativeLimitActive","negativeLimit","position","getPosition","setRecordPosition","id","Reset","setLocked","locked","from","to","counters","allSortBySortOrder","splice","randomDate","start","end","Date","getTime","Math","random","round","Change","providedIn"],"mappings":"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","file":"fullscreen-counter-fullscreen-counter-module-es5.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { FullscreenCounterPage } from './fullscreen-counter.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: FullscreenCounterPage\n  }\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    RouterModule.forChild(routes)\n  ],\n  declarations: [FullscreenCounterPage]\n})\nexport class FullscreenCounterPageModule {}\n","<ion-content>\n<ion-button\n  class=\"full-screen\"\n  color=\"{{color}}\"\n  (click)=\"count()\"\n>\n  <ion-label class=\"ion-text-center\">\n\n    <div [ngSwitch]=\"type\">\n      <h1\n        *ngIf=\"type == 'plus'\"\n      >\n        +{{counter.plusCount}}\n      </h1>\n\n      <h1\n        *ngIf=\"type == 'minus'\"\n      >\n        {{counter.minusCount}}\n      </h1>\n    </div>\n\n    <h1>{{counter.title}}</h1>\n    <h1>{{counter.count}}</h1>\n\n  </ion-label>\n\n</ion-button>\n\n</ion-content>\n","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { Router } from '@angular/router';\n\nimport { Counter } from '../models/counter';\nimport { CounterService } from '../services/counter.service';\n\nexport enum FullScreenCounterType {\n  plus = 'plus',\n  minus = 'minus',\n}\n\n@Component({\n  selector: 'app-fullscreen-counter',\n  templateUrl: './fullscreen-counter.page.html',\n  styleUrls: ['./fullscreen-counter.page.scss'],\n})\nexport class FullscreenCounterPage implements OnInit {\n\n  readonly CLOSE_DELAY = 700;\n\n  type: FullScreenCounterType;\n  counter: Counter;\n  color: string;\n\n  constructor(\n    private router: Router,\n    private route: ActivatedRoute,\n    private counterService: CounterService,\n  ) {}\n\n  ngOnInit() {\n    this.type = FullScreenCounterType[\n      this.route.snapshot.paramMap.get('type')\n    ];\n    this.counter = this.route.snapshot.data.counter;\n    switch (this.type) {\n      case FullScreenCounterType.plus:\n        this.color = 'success';\n        break;\n      case FullScreenCounterType.minus:\n        this.color = 'danger';\n        break;\n    }\n  }\n\n  async close() {\n    this.router.navigate([\n      '/counters'\n    ]);\n  }\n\n  async count() {\n    await this.counterService.count(\n      this.counter,\n      this.type === FullScreenCounterType.plus ?\n        this.counter.plusCount\n        : this.counter.minusCount\n    );\n  }\n\n}\n","import { Injectable } from '@angular/core';\n\nimport { Geolocation } from '@ionic-native/geolocation/ngx';\nimport { Vibration } from '@ionic-native/vibration/ngx';\n\nimport { Counter } from '../models/counter';\nimport { CounterRepositoryService } from '../models/counter-repository.service';\n\nimport { CountEvent, CountEventType } from '../models/count-event';\nimport { CountEventRepositoryService } from '../models/count-event-repository.service';\n\nimport { Position } from '../models/count-event';\nimport { PositionService } from './position.service';\n\nimport { AppStateService } from './app-state.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CounterService {\n\n  static readonly VIBRATION_PATTERN_POSITIVE = [30];\n  static readonly VIBRATION_PATTERN_NEGATIVE = [30, 30, 30];\n\n  constructor(\n    private counterRepositoryService: CounterRepositoryService,\n    private countEventRepositoryService: CountEventRepositoryService,\n    private positionService: PositionService,\n    private appStateService: AppStateService,\n    private vibration: Vibration,\n  ) {}\n\n  get allSortBySortOrder(): Array<Counter> {\n    return this.counterRepositoryService.allSortBySortOrder;\n  }\n\n  async addCounter() {\n    const newCounter = new Counter();\n    // add counter to bottom\n    newCounter.sortOrder = this.counterRepositoryService.all.length + 1;\n    await this.counterRepositoryService.save(newCounter);\n    return newCounter;\n  }\n\n  async delete(counter: Counter) {\n    // first delete the counter: this is so that the ui element disappers\n    // quicker which should be create better user experience.\n    await this.counterRepositoryService.delete(counter);\n\n    // then, delete all events of this counter\n    await Promise.all(\n      this.countEventRepositoryService.getByCounter(counter).map(\n        (i) => this.countEventRepositoryService.delete(i)\n      )\n    );\n  }\n\n  async count(\n    counter: Counter,\n    delta: number,\n  ) {\n    counter.count += delta;\n\n    // vibrate\n    if (\n      this.appStateService.appState.vibrate\n      && counter.vibrate\n    ) {\n      this.vibration.vibrate(\n        (delta > 0) ?\n          CounterService.VIBRATION_PATTERN_POSITIVE :\n          CounterService.VIBRATION_PATTERN_NEGATIVE\n      );\n    }\n\n    // apply positive and negative wraparounds\n    if (\n      counter.positiveLimitActive\n      && counter.count > counter.positiveLimit\n    ) {\n      counter.count = counter.count % counter.positiveLimit;\n    }\n\n    if (\n      counter.negativeLimitActive\n      && counter.count < counter.negativeLimit\n    ) {\n      counter.count = counter.count % counter.negativeLimit;\n    }\n\n    let position = null;\n    try {\n      position = await this.positionService.getPosition();\n    } catch (e) {\n      // user does not allow posiiton recording or something unexpected happened\n      await this.appStateService.setRecordPosition(false);\n    }\n\n    await Promise.all([\n      this.counterRepositoryService.save(counter),\n      this.countEventRepositoryService.save(\n        new CountEvent(\n          counter.id,\n          delta,\n          position,\n        )\n      )\n    ]);\n  }\n\n  async reset(\n    counter: Counter,\n  ) {\n    counter.count = 0;\n    await Promise.all([\n      this.counterRepositoryService.save(\n        counter\n      ),\n      this.countEventRepositoryService.save(\n        new CountEvent(\n          counter.id,\n          0,\n          {} as any,\n          CountEventType.Reset,\n        )\n      ),\n    ]);\n  }\n\n  async setLocked(\n    counter: Counter,\n    setLocked: boolean,\n  ) {\n    counter.locked = setLocked;\n    await this.counterRepositoryService.save(\n      counter\n    );\n  }\n\n  async reorder(\n    from: number,\n    to: number,\n  ) {\n    const counters = this.counterRepositoryService.allSortBySortOrder;\n    // move element in array\n    counters.splice(to, 0,\n      counters.splice(from, 1)[0]\n    );\n    // save in new order\n    await Promise.all(\n      counters.map(\n        async (counter, i) => {\n          counter.sortOrder = i;\n          await this.counterRepositoryService.save(counter);\n        }\n      )\n    );\n  }\n\n  /**\n   * For development purposes only\n   */\n  async addRandomCountEvent(\n    counter: Counter,\n  ) {\n    const delta = Math.round(Math.random() * 10 % 10 - 5);\n    counter.count += delta;\n\n    function randomDate(start, end) {\n      return new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));\n    }\n\n\n    await Promise.all([\n      this.counterRepositoryService.save(counter),\n      this.countEventRepositoryService.save(\n        new CountEvent(\n          counter.id,\n          delta,\n          null,\n          CountEventType.Change,\n          randomDate(new Date(2012, 0, 1), new Date()),\n        )\n      )\n    ]);\n  }\n\n}\n"]}