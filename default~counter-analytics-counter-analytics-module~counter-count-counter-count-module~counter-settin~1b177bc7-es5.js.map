{"version":3,"sources":["./src/app/services/counter.service.ts"],"names":[],"mappings":"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","file":"default~counter-analytics-counter-analytics-module~counter-count-counter-count-module~counter-settin~1b177bc7-es5.js","sourcesContent":["import { Injectable } from '@angular/core';\n\nimport { Geolocation } from '@ionic-native/geolocation/ngx';\nimport { Vibration } from '@ionic-native/vibration/ngx';\n\nimport { Counter } from '../models/counter';\nimport { CounterRepositoryService } from '../models/counter-repository.service';\n\nimport { CountEvent, CountEventType } from '../models/count-event';\nimport { CountEventRepositoryService } from '../models/count-event-repository.service';\n\nimport { Position } from '../models/count-event';\nimport { PositionService } from './position.service';\n\nimport { AppStateService } from './app-state.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CounterService {\n\n  static readonly VIBRATION_PATTERN_POSITIVE = [30];\n  static readonly VIBRATION_PATTERN_NEGATIVE = [30, 30, 30];\n\n  constructor(\n    private counterRepositoryService: CounterRepositoryService,\n    private countEventRepositoryService: CountEventRepositoryService,\n    private positionService: PositionService,\n    private appStateService: AppStateService,\n    private vibration: Vibration,\n  ) {}\n\n  get allSortBySortOrder(): Array<Counter> {\n    return this.counterRepositoryService.allSortBySortOrder;\n  }\n\n  async addCounter() {\n    const newCounter = new Counter();\n    // add counter to bottom\n    newCounter.sortOrder = this.counterRepositoryService.all.length + 1;\n    await this.counterRepositoryService.save(newCounter);\n    return newCounter;\n  }\n\n  async delete(counter: Counter) {\n    // first delete the counter: this is so that the ui element disappers\n    // quicker which should be create better user experience.\n    await this.counterRepositoryService.delete(counter);\n\n    // then, delete all events of this counter\n    await Promise.all(\n      this.countEventRepositoryService.getByCounter(counter).map(\n        (i) => this.countEventRepositoryService.delete(i)\n      )\n    );\n  }\n\n  async count(\n    counter: Counter,\n    delta: number,\n  ) {\n    counter.count += delta;\n\n    // vibrate\n    if (\n      this.appStateService.appState.vibrate\n      && counter.vibrate\n    ) {\n      this.vibration.vibrate(\n        (delta > 0) ?\n          CounterService.VIBRATION_PATTERN_POSITIVE :\n          CounterService.VIBRATION_PATTERN_NEGATIVE\n      );\n    }\n\n    // apply positive and negative wraparounds\n    if (\n      counter.positiveWrapAroundActive\n      && counter.count > counter.positiveWrapAround\n    ) {\n      counter.count = counter.count % counter.positiveWrapAround;\n    }\n\n    if (\n      counter.negativeWrapAroundActive\n      && counter.count < counter.negativeWrapAround\n    ) {\n      counter.count = counter.count % counter.negativeWrapAround;\n    }\n\n    let position = null;\n    try {\n      position = await this.positionService.getPosition();\n    } catch (e) {\n      // user does not allow posiiton recording or something unexpected happened\n      await this.appStateService.setRecordPosition(false);\n    }\n\n    await Promise.all([\n      this.counterRepositoryService.save(counter),\n      this.countEventRepositoryService.save(\n        new CountEvent(\n          counter.id,\n          delta,\n          position,\n        )\n      )\n    ]);\n  }\n\n  async reset(\n    counter: Counter,\n  ) {\n    counter.count = 0;\n    await Promise.all([\n      this.counterRepositoryService.save(\n        counter\n      ),\n      this.countEventRepositoryService.save(\n        new CountEvent(\n          counter.id,\n          0,\n          {} as any,\n          CountEventType.Reset,\n        )\n      ),\n    ]);\n  }\n\n  async setLocked(\n    counter: Counter,\n    setLocked: boolean,\n  ) {\n    counter.locked = setLocked;\n    await this.counterRepositoryService.save(\n      counter\n    );\n  }\n\n  async reorder(\n    from: number,\n    to: number,\n  ) {\n    const counters = this.counterRepositoryService.allSortBySortOrder;\n    // move element in array\n    counters.splice(to, 0,\n      counters.splice(from, 1)[0]\n    );\n    // save in new order\n    await Promise.all(\n      counters.map(\n        async (counter, i) => {\n          counter.sortOrder = i;\n          await this.counterRepositoryService.save(counter);\n        }\n      )\n    );\n  }\n\n  /**\n   * For development purposes only\n   */\n  async addRandomCountEvent(\n    counter: Counter,\n  ) {\n    const delta = Math.round(Math.random() * 10 % 10 - 5);\n    counter.count += delta;\n\n    function randomDate(start, end) {\n      return new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));\n    }\n\n\n    await Promise.all([\n      this.counterRepositoryService.save(counter),\n      this.countEventRepositoryService.save(\n        new CountEvent(\n          counter.id,\n          delta,\n          null,\n          CountEventType.Change,\n          randomDate(new Date(2012, 0, 1), new Date()),\n        )\n      )\n    ]);\n  }\n\n}\n"],"sourceRoot":""}